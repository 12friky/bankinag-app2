import React, { useState } from 'react';
import { FaUser, FaLock } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom'; // Import useNavigate
import './Login.css';
import Logo from '../../../../reaoure/lo.jpeg'; // Ensure the image path is correct

const Login = () => {
  const navigate = useNavigate(); // Initialize navigate
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(''); // State for error message
  const [loading, setLoading] = useState(false); // State for loading

  const handleSubmit = (e) => {
    e.preventDefault(); // Prevent default form submission
    setLoading(true); // Set loading to true

    // Fake credentials
    const validUsername = 'admin';
    const validPassword = 'admin';

    // Simulate an asynchronous verification process
    setTimeout(() => {
      // Check credentials
      if (username === validUsername && password === validPassword) {
        // Redirect to the dashboard
        navigate('/dashboard'); // Change '/dashboard' to your actual dashboard route
      } else {
        // Set error message
        setError('Invalid credentials. Please try again.');

        // Clear error message after 10 seconds
        setTimeout(() => {
          setError('');
        }, 10000); // 10 seconds
      }
      setLoading(false); // Set loading to false after verification
    }, 2000); // Simulate a 2-second delay for verification
  };

  return (
    <div className="login-container">
      {error && <div className="error-message">{error}</div>} {/* Display error message */}
      <div className="login-box">
        <img src={Logo} alt="Logo" className="logo" />
        <h2 className='Prompt'>Please Login</h2>
        <form onSubmit={handleSubmit}> {/* Add onSubmit handler */}
          <div className="input-group">
            <label>Username</label>
            <div className="input-with-icon">
              <FaUser className="input-icon" />
              <input 
                type="text" 
                placeholder="Username" 
                required 
                value={username} 
                onChange={(e) => setUsername(e.target.value)} // Update username state
              />
            </div>
          </div>
          <div className="input-group">
            <label>Single Sign-On Password</label>
            <div className="input-with-icon">
              <FaLock className="input-icon" />
              <input 
                type="password" 
                placeholder="Password" 
                required 
                value={password} 
                onChange={(e) => setPassword(e.target.value)} // Update password state
              />
            </div>
          </div>
          <button type="submit" className="login-button" disabled={loading}>
            {loading ? (
              <span className="loading-spinner"></span> // Loading spinner
            ) : (
              'Log in'
            )}
          </button>
          <div className="single-sign-on">
            <input type="checkbox" id="singleSignOn" />
            <label htmlFor="singleSignOn">Single Sign-on</label>
          </div>
        </form>
        <div className="link-group">
          <a href="#">Change Password</a>
          <a href="#">Reset Password</a>
        </div>
        <p className="disclaimer">
          You are authorized to use this System for approved business purposes only. Use for any other purpose is prohibited. All transactional records, reports, email, software and other data generated by or residing upon this System, to the extent permitted by local law, are the property of Citigroup Inc. or one of its subsidiaries or their affiliates (individually or collectively ‘Citigroup’) and may be used by Citigroup for any purpose authorized and permissible in your country of work. Activities on this System are monitored to the extent permitted by local law. Copyright © 2022 Citigroup Inc.
        </p>
      </div>
    </div>
  );
};

export default Login;
